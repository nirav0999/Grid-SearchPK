import java.util.Scanner;

public class validation_algorithm_check_duplicates {
	
	static char[][] grid;
	static int gridSize;
	static String registeredPswd;
	static int horizontal;
	static int vertical;
	static int horSteps;
	static int verSteps;
	
	public static char findCharAtPos(int x, int y) {
		
		int upd_x = (x + vertical*verSteps + gridSize) % gridSize;
		int upd_y = (y + horizontal*horSteps + gridSize) % gridSize;
		
		return grid[upd_x][upd_y];
	}
		
	public static boolean check(String enteredPswd){
		
		/**
		 * @param enteredPswd		Password entered by the user
		 * @param registeredPswd	Registered password of the user
		 * @param grid				Grid generated by the system
		 * @param horizontal		Registered Horizontal direction; -1 indicates left; 1 indicates right
		 * @param vertical			Registered Vertical direction; -1 indicates up; 1 indicates down
		 * @param horSteps			Number of registered steps in horizontal direction  
		 * @param verSteps			Number of registered steps in vertical direction
		 * @return 					The entered password is correct or not
		 */    
		
		// ASSUMPTION: All grid characters are distinct
		
		if(enteredPswd.length()!=registeredPswd.length()) {
			return false;
		}
		
		gridSize = grid.length;
		
		for(int p=0;p<registeredPswd.length();p++) {
			
			char chReg = registeredPswd.charAt(p);
			
			boolean correct = false;
			
			for(int i=0;i<gridSize;i++) { 
				
				for(int j=0;j<gridSize;j++) {
					
					if(grid[i][j]==chReg) {
						
						char chAct = findCharAtPos(i,j);
						
						if(chAct==enteredPswd.charAt(p)) {
							correct = true;
							break;
						}
						
					}
					
				}
				
				if(correct) {
					break;
				}
			}
			
			if(!correct) {
				return false;
			}
		}
		
		return true;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter grid size: ");
		// Grid Size
		int n = sc.nextInt();
		
		System.out.println("Enter grid: ");
		// Grid
		char[][] arr = new char[n][n];
		
		for(int x=0;x<n;x++) {
			
			String inp = sc.next();
			
			for(int y=0;y<n;y++) {
				char gch = inp.charAt(y);
				arr[x][y] = gch;
			}
		}
		
		System.out.print("Enter Registered Password: ");
		// Registered password for the user
		registeredPswd = sc.next(); 
		
		System.out.print("Enter Password provided by user: ");
		// Password entered by user
		String enteredPswd = sc.next();
		
		grid = arr;
		horizontal = 1;
		vertical = 1;
		horSteps = 1;
		verSteps = 3;
		
		boolean result = check(enteredPswd);
		if(result) {
			System.out.println("Password entered is CORRECT");
		}
		else {
			System.out.println("Password is entered is WRONG");
		}
		
		sc.close();
	}

}

/*
INPUT

5

BVTAD
ORYMU
PQNFZ
XLGHE
IJWKC

BVTAD
ORYMU
PANFZ
MLMHE
IJWKC

RAMBUTAN
WECLIHEA

WTRLIHTA

Expected Output: CORRECT
*/
